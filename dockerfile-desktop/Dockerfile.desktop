#####
# Used to generate the 'wardf/desktop' docker container.
# This is accessed either via a VNC client or a web browser,
# thanks to 'noVNC'.
#####

#####
# Common stuff at front.
#####

FROM unidata/cloudstream
MAINTAINER Ward Fisher <ward.fisher@gmail.com>
USER root
ENV DESKTOP_VERSION development

ENV DEBIAN_FRONTEND noninteractive

#####
# Install packages and update the system.
#####

###
# Install developer tools, utilities, vnc/novnc, ssh, other stuff.
###
# Delete sudoers to try to overcome a xenial issue.

# RUN mv /etc/sudoers /etc/sudoers.bak
# RUN rm -f /etc/sudoers


ENV install_packages man nano curl git emacs wget gcc g++ gfortran clang gdb autoconf automake make libtool m4 bison flex zlib1g-dev libjpeg-dev libcurl4-openssl-dev x11vnc xvfb xinit lxde wmctrl python firefox epiphany-browser openssh-server doxygen graphviz zip valgrind kcachegrind gitstats elfutils libelf-dev htop meld openmpi-bin libopenmpi-dev python3-tk python3-pexpect cmake linkchecker linkchecker-gui

RUN apt-get update && apt-get -d install -y ${install_packages}
RUN apt-get install -y ${install_packages}
RUN apt-get remove -y clipit && apt-get -y autoremove
# RUN mv /etc/sudoers.bak /etc/sudoers

###
# Install HDF4, HDF5
###

COPY hdf5-1.10.2.tar.bz2 /root/
COPY hdf-4.2.13.tar.bz2 /root/
copy parallel-netcdf-1.8.1.tar.bz2 /root/

##
# HDF4
##
ENV HDF4_VER hdf-4.2.13
ENV HDF4_FILE ${HDF4_VER}.tar.bz2
RUN tar -jxf ${HDF4_FILE} && cd ${HDF4_VER} && ./configure --disable-static --enable-shared --disable-netcdf --disable-fortran --prefix=/usr && make install -j 4 && rm -rf ${HDF4_VER}

##
# HDF5
#
# Build serial first, and then build parallel.
#
##
ENV HDF5VER 1.10.2
ENV HDF5_VER hdf5-${HDF5VER}
ENV HDF5_FILE ${HDF5_VER}.tar.bz2

# Install Serial
RUN tar -jxf ${HDF5_FILE} && cd ${HDF5_VER} && ./configure --disable-static --enable-shared --disable-fortran --enable-hl --prefix=/home/${CUSER}/libs/serial && make install -j 4 && make clean && cd ..

# Install Parallel and Clean Up
RUN cd ${HDF5_VER} && make clean && CFLAGS="-Wno-format-security" CC=$(which mpicc) ./configure --disable-static --enable-shared --disable-fortran --enable-hl --enable-parallel --prefix=/home/${CUSER}/libs/par && make install -j 4 && make clean && cd ..

# Install pnetcdf and clean up
RUN tar -jxf parallel-netcdf-1.8.1.tar.bz2
RUN cd parallel-netcdf-1.8.10 && CPPFLAGS="-fPIC" CC=`which mpicc` ./configure --prefix=/usr --disable-fortran && make -j 4 -k install && cd ..

###
# Install google chrome via command line.
# See http://askubuntu.com/questions/79280/how-to-install-chrome-browser-properly-via-command-line
# for more info.
###
RUN echo 'deb http://dl.google.com/linux/chrome/deb/ stable main' >> /etc/apt/sources.list
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
RUN sudo apt-get update && sudo apt-get install -y google-chrome-stable

#####
# Switch over to non-root user,
# configure system and environment.
#####
USER ${CUSER}
ENV HOME /home/${CUSER}
WORKDIR /home/${CUSER}

#################
# This is an example of overriding the
# default window manager used by
# unidata/cloudidv
#################

###
# Create the .xinitrc file.
# This will be invoked when xinit is called from the initial
# command script.
###

RUN mkdir -p ~/.vnc
RUN echo '  /usr/bin/x11vnc -display :1 -autoport 5901 -repeat -forever &' > ~/.xinitrc.nopassword && echo '/usr/bin/startlxde' >> ~/.xinitrc.nopassword

RUN echo '  /usr/bin/x11vnc -display :1 -autoport 5901 -repeat -forever -usepw &' > ~/.xinitrc.password && echo '/usr/bin/startlxde' >> ~/.xinitrc.password


#####
# Initialize environmental variables, expose
# ports, etc.
#####
EXPOSE 22
EXPOSE 5901
EXPOSE 6080

###
# If not true, noVNC will not run.
###
ENV USENOVNC TRUE

#############
# Override default windows session geometry and color depth.
#############
#ENV SIZEW 1600
#ENV SIZEH 1000
#ENV CDEPTH 24

#####
# Do some user configuration.
#
# * Configure git
# * Configure emacs
# * configure .bashrc with aliases
#####
RUN git config --global user.email "wfisher@ucar.edu"
RUN git config --global user.name "Ward Fisher"
RUN git config --global push.default simple
RUN git config --global credential.helper 'cache --timeout=3600'

COPY custom.bashrc /home/${CUSER}/
RUN cat /home/${CUSER}/custom.bashrc >> /home/${CUSER}/.bashrc

#####
# Copy over scripts, configuration files, readme, etc.
#####

###
# Make some directories.
###
RUN mkdir -p /home/${CUSER}/local/bin && mkdir -p /home/${CUSER}/docs

###
# Copy over files.
###
COPY README.md /home/${CUSER}/docs/
COPY Dockerfile.desktop /home/${CUSER}/docs/

COPY config/emacs-small.el /home/${CUSER}/
RUN mv /home/${CUSER}/emacs-small.el /home/${CUSER}/.emacs
COPY config/dotconfig/ /home/${CUSER}/.config/

COPY config/xscreensaver /home/${CUSER}/
RUN mv /home/${CUSER}/xscreensaver /home/${CUSER}/.xscreensaver

COPY activate_env /home/${CUSER}/local/bin
COPY convert_to_parallel.sh /home/${CUSER}/local/bin

##
# SSH stuff
##
USER root
COPY ssh /home/${CUSER}/.ssh/
RUN chmod 600 /home/${CUSER}/.ssh/*
RUN mv /home/${CUSER}/.ssh/id_rsa.pub /home/${CUSER}/.ssh/authorized_keys

RUN git clone http://github.com/lvc/installer lvc-installer && cd lvc-installer && make install prefix=/usr target=abi-tracker

###
# Set up the initial development environment, 'serial'.
###
RUN cp -v -R /home/${CUSER}/libs/serial/* /usr

###
# Install a command-line speedtest tool.
# See http://askubuntu.com/questions/104755/how-to-check-internet-speed-via-terminal
###

RUN wget -O /home/${CUSER}/local/bin/speedtest-cli https://raw.github.com/sivel/speedtest-cli/master/speedtest_cli.py && chmod +x /home/${CUSER}/local/bin/speedtest-cli


###
# Add a version number.
###
RUN echo "Desktop Version: \"$DESKTOP_VERSION\"\t\t$(date)" >> $VERSION_FILE

###
# Cleanup
###

RUN rm -f /usr/bin/ncdump /usr/bin/ncgen
RUN chown -R ${CUSER} /home/${CUSER}/
RUN apt-get -y clean && apt-get -y autoremove
RUN apt-get -y autoclean
RUN apt-get -y purge

#####
# Kick off the session as the following user.
#
# Because there's no default program, we
# don't have to copy over a start.sh file.
#####
USER ${CUSER}
